package thread;

/**
 * @Auther: ccy
 * @Date: 2020/9/24 - 14:53
 * @Description:这两个方法并不是给线程使用的,每次在执行的时候操作的都是共享对象
 * @version: 1.0
 */
public class Wait$Notify {
    /**
     * 1 wait,notify是属于object的final方法,无法被重写
     * 2 由于 wait()、notify/notifyAll() 在synchronized 代码块执行，说明当前线程一定是获取了锁的
     * 3 当线程执行wait()方法时候，会释放当前的锁，然后让出CPU，进入等待状态。
     * 4 只有当 notify/notifyAll() 被执行时候，才会唤醒一个或多个正处于等待状态的线程，然后继续往下执行，直到执行完synchronized 代码块的代码或是中途遇到wait() ，再次释放锁。
     * 5 notify方法只唤醒一个等待（对象的）线程并使该线程开始执行。所以如果有多个线程等待一个对象，这个方法只会唤醒其中一个线程，选择哪个线程取决于操作系统对多线程管理的实现.
     *   notifyAll会唤醒所有等待(对象的)线程，尽管哪一个线程将会第一个处理取决于操作系统的实现。如果当前情况下有多个线程需要被唤醒，推荐使用notifyAll 方法。比如在生产者-消费者里面的使用，每次都需要唤醒所有的消费者或是生产者，以判断程序是否可以继续往下执行。
     */
}
